import { componentList } from "./component-list";

import * as fs from "fs";
import { iconList } from "./icon-list";

let baseTemplate = function (component: string) {
  let componentPascelCase = component
    .split("-")
    .map((word) => {
      return word.charAt(0).toUpperCase() + word.slice(1);
    })
    .join("");

  return `
// Auto-generated by scripts/generate.ts

import { defineCustomElement } from '@ionic/core/components/${component}'
import { initialize } from '@ionic/core/components'
import { type JSX as IonicJSX } from '@ionic/core'
import { JSX as JSXBase } from 'solid-js'
import { FixIonProps } from '../lib'

initialize()
defineCustomElement()

export type ${componentPascelCase}Props = FixIonProps<IonicJSX.${componentPascelCase}> &
  JSXBase.HTMLAttributes<HTML${componentPascelCase}Element>

export function ${componentPascelCase}(props: ${componentPascelCase}Props) {
  //@ts-ignore
  return <${component} {...props} />
}
`;
};

let iconTemplate = function (iconName: string) {
  console.log("Generating icon", iconName);
  let iconCamelCase = iconName.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
  let iconPascalCase = iconCamelCase.charAt(0).toUpperCase() + iconCamelCase.slice(1);

  return `
// Auto-generated by scripts/generate.ts

import { addIcons } from "ionicons";
import { ${iconCamelCase} } from "ionicons/icons";

addIcons({"${iconName}": ${iconCamelCase} });

export let icon${iconPascalCase} = "${iconName}";
`;
};

componentList.forEach((component) => {
  fs.writeFileSync(`src/components/${component}.tsx`, baseTemplate(component));
});

fs.writeFileSync(
  "src/components/index.ts",
  componentList.map((component) => `export * from "./${component}";`).join("\n")
);

iconList.forEach((icon) => {
  fs.writeFileSync(`src/icons/${icon}.ts`, iconTemplate(icon));
});

fs.writeFileSync(
  "src/icons/index.ts",
  iconList.map((icon) => `export * from "./${icon}";`).join("\n")
);

// Update exports for each component in package.json

function updatePackageJsonExports() {
  let packageJson = JSON.parse(fs.readFileSync("package.json", "utf8"));

  packageJson.exports = {
    "./router": {
      import: "./router.mjs",
      require: "./router.js",
      default: "./router.js",
      types: "./router.d.ts",
    },
  };

  for (let component of componentList) {
    // CommonJS will be generated in lib/components/name.js
    // ES6 will be generated in lib/components/name.mjs
    // Types will be available at lib/components/name.d.ts
    packageJson.exports["./components/" + component] = {
      import: "./components/" + component + ".mjs",
      require: "./components/" + component + ".js",
      default: "./components/" + component + ".js",
      types: "./components/" + component + ".d.ts",
    };
  }

  for (let icon of iconList) {
    packageJson.exports["./icons/" + icon] = {
      import: "./icons/" + icon + ".mjs",
      require: "./icons/" + icon + ".js",
      default: "./icons/" + icon + ".js",
      types: "./icons/" + icon + ".d.ts",
    };
  }

  fs.writeFileSync("package.json", JSON.stringify(packageJson, null, 2));
}
