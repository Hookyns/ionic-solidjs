// Auto-generated by scripts/generate.ts

import { defineCustomElement } from '@ionic/core/components/ion-input'
import type { JSX as IonicJSX } from '@ionic/core'
import { type JSX as JSXBase, splitProps } from 'solid-js'
import type { FixIonProps } from '../../lib'
import { prefixJSProps, prefixHTMLAttributes } from "../../utils/fixProps";

defineCustomElement()

export type IonInputProps = FixIonProps<IonicJSX.IonInput> &
	JSXBase.HTMLAttributes<HTMLIonInputElement>

export function IonInput(props: IonInputProps) {
	const [ componentProperties, children, events, attributes ] = splitProps(
		props, 
		['autocapitalize', 'autocomplete', 'autocorrect', 'autofocus', 'clearInput', 'clearInputIcon', 'clearOnEdit', 'color', 'counter', 'counterFormatter', 'debounce', 'disabled', 'enterkeyhint', 'errorText', 'fill', 'helperText', 'inputmode', 'label', 'labelPlacement', 'max', 'maxlength', 'min', 'minlength', 'mode', 'multiple', 'name', 'pattern', 'placeholder', 'readonly', 'required', 'shape', 'spellcheck', 'step', 'type', 'value'],
		['children'],
		['on:ionBlur', 'on:ionChange', 'on:ionFocus', 'on:ionInput']);
	const attrs = () => prefixHTMLAttributes(attributes);
	const componentProps = () => prefixJSProps(componentProperties);

	return <ion-input {...componentProps()} {...attrs()} {...events}>{children.children}</ion-input>;
}
