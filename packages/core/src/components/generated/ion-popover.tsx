// Auto-generated by scripts/generate.ts

import { defineCustomElement } from '@ionic/core/components/ion-popover'
import type { JSX as IonicJSX } from '@ionic/core'
import { type JSX as JSXBase, splitProps } from 'solid-js'
import type { FixIonProps } from '../../lib'
import { prefixJSProps, prefixHTMLAttributes } from "../../utils/fixProps";

defineCustomElement()

export type IonPopoverProps = FixIonProps<IonicJSX.IonPopover> &
	JSXBase.HTMLAttributes<HTMLIonPopoverElement>

export function IonPopover(props: IonPopoverProps) {
	const [ componentProperties, children, events, attributes ] = splitProps(
		props, 
		['alignment', 'animated', 'arrow', 'backdropDismiss', 'component', 'componentProps', 'dismissOnSelect', 'enterAnimation', 'event', 'focusTrap', 'htmlAttributes', 'isOpen', 'keepContentsMounted', 'keyboardClose', 'leaveAnimation', 'mode', 'onDidDismiss', 'onDidPresent', 'onWillDismiss', 'onWillPresent', 'reference', 'showBackdrop', 'side', 'size', 'translucent', 'trigger', 'triggerAction'],
		['children'],
		['on:ionPopoverDidDismiss', 'on:ionPopoverDidPresent', 'on:ionPopoverWillDismiss', 'on:ionPopoverWillPresent']);
	const attrs = () => prefixHTMLAttributes(attributes);
	const componentProps = () => prefixJSProps(componentProperties);

	return <ion-popover {...componentProps()} {...attrs()} {...events}>{children.children}</ion-popover>;
}
